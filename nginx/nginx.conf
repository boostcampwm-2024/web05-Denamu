user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {
	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##
	log_format custom_spring_style '[$time_local] INFO [PID:$pid] --- [Thread:$connection] $remote_addr : $request_method "$request_uri" $status ($request_time sec) referer="$http_referer" agent="$http_user_agent" bytes=$bytes_sent req_length=$request_length';

	access_log /var/log/nginx/access.log custom_spring_style;
	error_log /var/log/nginx/error.log error;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	# include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;
	# HTTP로 들어오는 요청을 HTTPS로 Redirect
	server {
		listen 80;
		server_name localhost;

		return 301 https://$host$request_uri;
	}

	# HTTPS로 들어온 요청에 대한 처리 진행
	server {
		listen 443 ssl;
		server_name localhost;

		ssl_certificate /etc/nginx/certs/certificate.crt;
		ssl_certificate_key /etc/nginx/certs/private.key;

		# 정적 파일 서빙 - FE 빌드 파일
		location / {
			root /var/web05-Denamu/client/dist;
			index index.html;
			try_files $uri /index.html;
		}

		# 정적 파일 서빙
		location /files {
			alias /var/web05-Denamu/static/;
			try_files $uri $uri/ =404;
		}

		# API 요청을 NestJS로 프록시
		location /api {
			proxy_pass http://app:8080;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_read_timeout 3600s;

			proxy_set_header X-Real-IP $remote_addr;  # X-Real-IP 헤더로 실제 IP 전달
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # X-Forwarded-For 헤더로 실제 IP 전달
			proxy_set_header X-Forwarded-Proto $scheme; # 클라이언트의 프로토콜 전달
		}

		# WebSocket 요청 프록시
		location /chat {
			proxy_pass http://app:8080;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_read_timeout 3600s;
			proxy_send_timeout 3600s;

			proxy_set_header X-Real-IP $remote_addr;  # X-Real-IP 헤더로 실제 IP 전달
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # X-Forwarded-For 헤더로 실제 IP 전달
			proxy_set_header X-Forwarded-Proto $scheme; # 클라이언트의 프로토콜 전달
		}
	}
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
#
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
